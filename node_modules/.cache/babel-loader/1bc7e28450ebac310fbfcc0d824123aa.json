{"ast":null,"code":"var _jsxFileName = \"/Users/jhnnsjschk/Desktop/codeacademy/jammming/src/Components/App/App.js\";\nimport React from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport { SearchBar } from './../SearchBar/searchBar.js';\nimport { SearchResults } from './../SearchResults/searchResults.js';\nimport { Playlist } from './../Playlist/playlist.js';\nimport Spotify from './../../util/Spotify.js';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchResults: [],\n      playlistName: 'MyCoolPlaylist',\n      playlistTracks: [{\n        name: 'playname',\n        artist: 'playartist',\n        album: 'playalbum',\n        id: 'id'\n      }]\n    };\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  } // adding a song from the search results track list to the user’s custom playlist. The user can trigger the .addTrack() method by clicking the + sign from the search results list.\n\n\n  addTrack(track) {\n    let tracks = this.state.playlistTracks;\n\n    if (tracks.find(savedTrack => savedTrack.id === track.id)) {\n      return;\n    } else {\n      tracks.push(track);\n    }\n\n    this.setState({\n      playlistTracks: tracks\n    });\n  } // removes a song from a user’s custom playlist when the user selects the - sign inside of a rendered track.\n\n\n  removeTrack(track) {\n    let tracks = this.state.playlistTracks;\n    tracks = tracks.filter(playlistTrack => playlistTrack.id !== track.id);\n    this.setState({\n      playlistTracks: tracks\n    });\n  } // hange the name of their playlist, and save the updated value to the App component’s state\n\n\n  updatePlaylistName(name) {\n    this.setState({\n      playlistName: name\n    });\n  } // save a user’s playlist to their Spotify account and resets the state of the playlist name and tracks array\n\n\n  savePlaylist() {\n    let trackURIs = [];\n  } //\n\n\n  search(term) {\n    Spotify.search(term).then(searchResults => {\n      this.setState({\n        searchResults: searchResults\n      });\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"Ja\", React.createElement(\"span\", {\n      className: \"highlight\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"mmm\"), \"ing\"), React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(SearchBar, {\n      onSearch: this.search,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"App-playlist\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(SearchResults, {\n      searchResults: this.state.searchResults,\n      onAdd: this.addTrack,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }), React.createElement(Playlist, {\n      playlistTracks: this.state.playlistTracks,\n      onRemove: this.removeTrack,\n      onNameChange: this.updatePlaylistName,\n      onSave: this.savePlaylist,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/jhnnsjschk/Desktop/codeacademy/jammming/src/Components/App/App.js"],"names":["React","SearchBar","SearchResults","Playlist","Spotify","App","Component","constructor","props","state","searchResults","playlistName","playlistTracks","name","artist","album","id","addTrack","bind","removeTrack","updatePlaylistName","savePlaylist","search","track","tracks","find","savedTrack","push","setState","filter","playlistTrack","trackURIs","term","then","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { SearchBar } from './../SearchBar/searchBar.js';\nimport { SearchResults } from './../SearchResults/searchResults.js';\nimport { Playlist } from './../Playlist/playlist.js';\nimport Spotify from './../../util/Spotify.js'\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchResults: [],\n    playlistName: 'MyCoolPlaylist',\n    playlistTracks: [\n      { name: 'playname',\n        artist: 'playartist',\n        album: 'playalbum',\n        id: 'id'\n      }\n    ]\n    };\n\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n\n  }\n\n  // adding a song from the search results track list to the user’s custom playlist. The user can trigger the .addTrack() method by clicking the + sign from the search results list.\n  addTrack(track) {\n    let tracks = this.state.playlistTracks\n    if (tracks.find(savedTrack => savedTrack.id === track.id)) {\n      return;\n    } else {\n      tracks.push(track);\n    }\n\n    this.setState({ playlistTracks: tracks});\n  }\n\n  // removes a song from a user’s custom playlist when the user selects the - sign inside of a rendered track.\n  removeTrack(track) {\n    let tracks = this.state.playlistTracks\n    tracks = tracks.filter(playlistTrack => playlistTrack.id !== track.id);\n\n    this.setState({ playlistTracks: tracks});\n  }\n\n  // hange the name of their playlist, and save the updated value to the App component’s state\n  updatePlaylistName(name) {\n    this.setState({ playlistName: name});\n  }\n\n  // save a user’s playlist to their Spotify account and resets the state of the playlist name and tracks array\n  savePlaylist() {\n    let trackURIs = [];\n\n  }\n\n  //\n  search(term) {\n    Spotify.search(term).then(searchResults => {\n      this.setState({searchResults: searchResults});\n    });\n  }\n\n  render () {\n    return (\n      <div>\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n          < SearchBar onSearch={this.search}/>\n          <div className=\"App-playlist\">\n          <SearchResults searchResults={this.state.searchResults} onAdd={this.addTrack}/>\n          <Playlist playlistTracks={this.state.playlistTracks} onRemove={this.removeTrack} onNameChange={this.updatePlaylistName} onSave={this.savePlaylist}/>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}