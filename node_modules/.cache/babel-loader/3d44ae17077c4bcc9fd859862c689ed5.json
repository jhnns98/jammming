{"ast":null,"code":"let clientId = '3d9d154962884d8fb22eb244782faf67';\nlet redirectURI = 'http://localhost:3000/';\n/*\nlet accessToken;\n\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n\n    const accessTokenMatches = window.location.href.match(/access_token=([^&]*)/);\n    const tokenExpiresMatch = window.location.href.match(/expires_in=([^&]*)/);\n    if (accessTokenMatches && tokenExpiresMatch) {\n      accessToken = accessTokenMatches[1];\n      const tokenExpires = Number(tokenExpiresMatch[1]);\n      window.setTimeout(() => accessToken = '', tokenExpires * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n    } else {\n      const userRedirect = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\n      window.location = userRedirect;\n    }\n  },\n\n  search(term) {\n    let accessToken = this.getAccessToken();\n    if (!accessToken) {\n      console.log('No accessToken!');\n      return;\n    };\n\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n    headers: {Authorization: `Bearer ${accessToken}`}\n    }).then(response => { return response.json()\n    }).then(jsonResponse => {\n        if (!jsonResponse.tracks) {\n          return [];\n        }\n        return jsonResponse.tracks.items.map(track => ({\n            id: track.id,\n            name: track.name,\n            artist: track.artists[0].name,\n            album: track.album.name,\n            uri: track.uri\n        }));\n    });\n  },\n\n  savePlaylists(name, trackURIs) {\n    if (!name || !trackURIs.length) {\n      return;\n    }\n\n    // three default variables\n    let accessToken = this.getAccessToken();\n    let headers = { Authorization: `Bearer ${accessToken}`};\n    let userID;\n\n    // fetch request\n    fetch('https://api.spotify.com/v1/me', {headers: headers}\n    ).then(response => {\n      response.json()\n    }).then(jsonResponse => {\n      userID = jsonResponse.id;\n      return fetch('https://api.spotify.com/v1/users/' + userID + '/playlists', {\n        headers: headers,\n        method: 'POST',\n        body: JSON.stringify({name: name})\n      }).then(response => response.json()\n      ).then(jsonResponse => {\n        const playlistID = jsonResponse.id;\n        return fetch('https://api.spotify.com/v1/users/' + userID +'/playlists/'+ playlistID + '/tracks', {\n          headers: headers,\n          method: 'POST',\n          body: JSON.stringify({uris: trackURIs})\n        })\n      });\n    });\n\n  },\n\n};\n// not sure about items in map method\n\nexport default Spotify;\n*/\n\nlet accessToken;\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n\n    const accessTokenMatches = window.location.href.match(/access_token=([^&]*)/);\n    const tokenExpiresMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (accessTokenMatches && tokenExpiresMatch) {\n      accessToken = accessTokenMatches[1];\n      const tokenExpires = Number(tokenExpiresMatch[1]);\n      window.setTimeout(() => accessToken = '', tokenExpires * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n    } else {\n      const userRedirect = \"https://accounts.spotify.com/authorize?client_id=\".concat(clientId, \"&response_type=token&scope=playlist-modify-public&redirect_uri=\").concat(redirectURI);\n      window.location = userRedirect;\n    }\n  },\n\n  search(term) {\n    const accessToken = Spotify.getAccessToken(); // fetch request converting to JSON\n\n    return fetch(\"https://api.spotify.com/v1/search?type=track&q=\".concat(term), {\n      headers: {\n        Authorization: \"Bearer \".concat(accessToken)\n      }\n    }).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      if (!jsonResponse.tracks) {\n        return [];\n      }\n\n      return jsonResponse.tracks.items.map(track => ({\n        id: track.id,\n        name: track.name,\n        artist: track.artists[0].name,\n        album: track.album.name,\n        uri: track.uri\n      }));\n    });\n  },\n\n  savePlaylist(name, trackUris) {\n    if (!name || !trackUris.length) {\n      return;\n    } // Setting accessToken to current users access token\n\n\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: \"Bearer \".concat(accessToken)\n    };\n    let userId; // fetch request converting to JSON\n\n    return fetch('https://api.spotify.com/v1/me', {\n      headers: headers\n    }).then(response => response.json()).then(jsonResponse => {\n      userId = jsonResponse.id;\n      return fetch(\"https://api.spotify.com/v1/users/\".concat(userId, \"/playlists\"), {\n        headers: headers,\n        method: 'POST',\n        body: JSON.stringify({\n          name: name\n        })\n      }).then(response => response.json()).then(jsonResponse => {\n        const playlistId = jsonResponse.id;\n        return fetch(\"https://api.spotify.com/v1/users/\".concat(userId, \"/playlists/\").concat(playlistId, \"/tracks\"), {\n          headers: headers,\n          method: 'POST',\n          body: JSON.stringify({\n            uris: trackUris\n          })\n        });\n      });\n    });\n  }\n\n};\nexport default Spotify;","map":{"version":3,"sources":["/Users/jhnnsjschk/Desktop/codeacademy/jammming/src/util/Spotify.js"],"names":["clientId","redirectURI","accessToken","Spotify","getAccessToken","accessTokenMatches","window","location","href","match","tokenExpiresMatch","tokenExpires","Number","setTimeout","history","pushState","userRedirect","search","term","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris"],"mappings":"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","sourcesContent":["let clientId = '3d9d154962884d8fb22eb244782faf67';\nlet redirectURI = 'http://localhost:3000/';\n/*\nlet accessToken;\n\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n\n    const accessTokenMatches = window.location.href.match(/access_token=([^&]*)/);\n    const tokenExpiresMatch = window.location.href.match(/expires_in=([^&]*)/);\n    if (accessTokenMatches && tokenExpiresMatch) {\n      accessToken = accessTokenMatches[1];\n      const tokenExpires = Number(tokenExpiresMatch[1]);\n      window.setTimeout(() => accessToken = '', tokenExpires * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n    } else {\n      const userRedirect = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\n      window.location = userRedirect;\n    }\n  },\n\n  search(term) {\n    let accessToken = this.getAccessToken();\n    if (!accessToken) {\n      console.log('No accessToken!');\n      return;\n    };\n\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n    headers: {Authorization: `Bearer ${accessToken}`}\n    }).then(response => { return response.json()\n    }).then(jsonResponse => {\n        if (!jsonResponse.tracks) {\n          return [];\n        }\n        return jsonResponse.tracks.items.map(track => ({\n            id: track.id,\n            name: track.name,\n            artist: track.artists[0].name,\n            album: track.album.name,\n            uri: track.uri\n        }));\n    });\n  },\n\n  savePlaylists(name, trackURIs) {\n    if (!name || !trackURIs.length) {\n      return;\n    }\n\n    // three default variables\n    let accessToken = this.getAccessToken();\n    let headers = { Authorization: `Bearer ${accessToken}`};\n    let userID;\n\n    // fetch request\n    fetch('https://api.spotify.com/v1/me', {headers: headers}\n    ).then(response => {\n      response.json()\n    }).then(jsonResponse => {\n      userID = jsonResponse.id;\n      return fetch('https://api.spotify.com/v1/users/' + userID + '/playlists', {\n        headers: headers,\n        method: 'POST',\n        body: JSON.stringify({name: name})\n      }).then(response => response.json()\n      ).then(jsonResponse => {\n        const playlistID = jsonResponse.id;\n        return fetch('https://api.spotify.com/v1/users/' + userID +'/playlists/'+ playlistID + '/tracks', {\n          headers: headers,\n          method: 'POST',\n          body: JSON.stringify({uris: trackURIs})\n        })\n      });\n    });\n\n  },\n\n};\n// not sure about items in map method\n\nexport default Spotify;\n*/\nlet accessToken;\n\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n\n    const accessTokenMatches = window.location.href.match(/access_token=([^&]*)/);\n    const tokenExpiresMatch = window.location.href.match(/expires_in=([^&]*)/);\n    if(accessTokenMatches && tokenExpiresMatch) {\n      accessToken = accessTokenMatches[1];\n      const tokenExpires = Number(tokenExpiresMatch[1]);\n      window.setTimeout(() => accessToken = '', tokenExpires * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n    } else {\n      const userRedirect = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\n      window.location = userRedirect;\n    }\n  },\n\n  search(term) {\n      const accessToken = Spotify.getAccessToken();\n\n      // fetch request converting to JSON\n      return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n        headers: {\n          Authorization: `Bearer ${accessToken}`\n        }\n      }).then(response => {\n        return response.json();\n      }).then(jsonResponse => {\n        if (!jsonResponse.tracks) {\n          return [];\n        }\n        return jsonResponse.tracks.items.map(track => ({\n          id: track.id,\n          name: track.name,\n          artist: track.artists[0].name,\n          album: track.album.name,\n          uri: track.uri\n        }));\n      });\n    },\n\n  savePlaylist(name, trackUris) {\n    if (!name || !trackUris.length) {\n      return;\n    }\n\n    // Setting accessToken to current users access token\n    const accessToken = Spotify.getAccessToken();\n    const headers = { Authorization: `Bearer ${accessToken}` };\n    let userId;\n\n    // fetch request converting to JSON\n    return fetch('https://api.spotify.com/v1/me', {headers: headers}\n    ).then(response => response.json()\n    ).then(jsonResponse => {\n      userId = jsonResponse.id;\n      return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n        headers: headers,\n        method: 'POST',\n        body: JSON.stringify({name: name})\n      }).then(response => response.json()\n      ).then(jsonResponse => {\n        const playlistId = jsonResponse.id;\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n          headers: headers,\n          method: 'POST',\n          body: JSON.stringify({uris: trackUris})\n        });\n      });\n    });\n  }\n\n\n};\n\nexport default Spotify;\n"]},"metadata":{},"sourceType":"module"}