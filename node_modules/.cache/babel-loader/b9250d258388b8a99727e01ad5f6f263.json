{"ast":null,"code":"let clientId = '3d9d154962884d8fb22eb244782faf67';\nlet clientSecret = 'fa730531798d4521890bfedf100d81d7';\nlet redirectURI = 'http://localhost:3000/';\nlet accessToken;\nlet Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n\n    const accessTokenMatches = window.location.href.match(/access_token=([^&]*)/);\n    const tokenExpiresMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (accessTokenMatches && tokenExpiresMatch) {\n      accessToken = accessTokenMatches[1];\n      const tokenExpires = Number(tokenExpiresMatch[1]);\n      window.setTimeout(() => accessToken = '', tokenExpires * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n    } else {\n      const userRedirect = \"https://accounts.spotify.com/authorize?client_id=\".concat(clientId, \"&response_type=token&scope=playlist-modify-public&redirect_uri=\").concat(redirectURI);\n      window.location = userRedirect;\n    }\n  },\n\n  search(term) {\n    const accessToken = Spotify.getAccessToken();\n    fetch(\"https://api.spotify.com/v1/search?type=track&q=\".concat(term), {\n      headers: {\n        'Authorization': 'Bearer ' + accessToken\n      }\n    }).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error('Request failed!');\n    }, networkError => console.log(networkError.message)).then(jsonResponse => {\n      if (!jsonResponse.tracks) {\n        return [];\n      }\n\n      return jsonResponse.tracks.items.map(track => ({\n        id: track.id,\n        name: track.name,\n        artist: track.artists[0].name,\n        album: track.album.name,\n        uri: track.uri\n      }));\n    });\n  },\n\n  savePlaylists(name, trackURIs) {\n    if (!name || !trackURIs.length) {\n      return;\n    }\n  }\n\n}; // not sure about items in map method\n\nexport default Spotify;","map":{"version":3,"sources":["/Users/jhnnsjschk/Desktop/codeacademy/jammming/src/util/Spotify.js"],"names":["clientId","clientSecret","redirectURI","accessToken","Spotify","getAccessToken","accessTokenMatches","window","location","href","match","tokenExpiresMatch","tokenExpires","Number","setTimeout","history","pushState","userRedirect","search","term","fetch","headers","then","response","ok","json","Error","networkError","console","log","message","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri","savePlaylists","trackURIs","length"],"mappings":"AAAA,IAAIA,QAAQ,GAAG,kCAAf;AACA,IAAIC,YAAY,GAAG,kCAAnB;AACA,IAAIC,WAAW,GAAG,wBAAlB;AAEA,IAAIC,WAAJ;AAEA,IAAIC,OAAO,GAAG;AACZC,EAAAA,cAAc,GAAG;AACf,QAAIF,WAAJ,EAAiB;AACf,aAAOA,WAAP;AACD;;AAED,UAAMG,kBAAkB,GAAGC,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2B,sBAA3B,CAA3B;AACA,UAAMC,iBAAiB,GAAGJ,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2B,oBAA3B,CAA1B;;AACA,QAAIJ,kBAAkB,IAAIK,iBAA1B,EAA6C;AAC3CR,MAAAA,WAAW,GAAGG,kBAAkB,CAAC,CAAD,CAAhC;AACA,YAAMM,YAAY,GAAGC,MAAM,CAACF,iBAAiB,CAAC,CAAD,CAAlB,CAA3B;AACAJ,MAAAA,MAAM,CAACO,UAAP,CAAkB,MAAMX,WAAW,GAAG,EAAtC,EAA0CS,YAAY,GAAG,IAAzD;AACAL,MAAAA,MAAM,CAACQ,OAAP,CAAeC,SAAf,CAAyB,cAAzB,EAAyC,IAAzC,EAA+C,GAA/C;AACA,aAAOb,WAAP;AACD,KAND,MAMO;AACL,YAAMc,YAAY,8DAAuDjB,QAAvD,4EAAiIE,WAAjI,CAAlB;AACAK,MAAAA,MAAM,CAACC,QAAP,GAAkBS,YAAlB;AACD;AACF,GAlBW;;AAoBZC,EAAAA,MAAM,CAACC,IAAD,EAAO;AACX,UAAMhB,WAAW,GAAGC,OAAO,CAACC,cAAR,EAApB;AAEAe,IAAAA,KAAK,0DAAmDD,IAAnD,GAA2D;AAChEE,MAAAA,OAAO,EAAE;AAAC,yBAAiB,YAAYlB;AAA9B;AADuD,KAA3D,CAAL,CAEGmB,IAFH,CAEQC,QAAQ,IAAI;AAClB,UAAIA,QAAQ,CAACC,EAAb,EAAiB;AACf,eAAOD,QAAQ,CAACE,IAAT,EAAP;AACD;;AACD,YAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACD,KAPD,EAOGC,YAAY,IAAIC,OAAO,CAACC,GAAR,CAAYF,YAAY,CAACG,OAAzB,CAPnB,EAQER,IARF,CAQOS,YAAY,IAAI;AACnB,UAAI,CAACA,YAAY,CAACC,MAAlB,EAA0B;AACxB,eAAO,EAAP;AACD;;AACD,aAAOD,YAAY,CAACC,MAAb,CAAoBC,KAApB,CAA0BC,GAA1B,CAA8BC,KAAK,KAAK;AAC3CC,QAAAA,EAAE,EAAED,KAAK,CAACC,EADiC;AAE3CC,QAAAA,IAAI,EAAEF,KAAK,CAACE,IAF+B;AAG3CC,QAAAA,MAAM,EAAEH,KAAK,CAACI,OAAN,CAAc,CAAd,EAAiBF,IAHkB;AAI3CG,QAAAA,KAAK,EAAEL,KAAK,CAACK,KAAN,CAAYH,IAJwB;AAK3CI,QAAAA,GAAG,EAAEN,KAAK,CAACM;AALgC,OAAL,CAAnC,CAAP;AAOH,KAnBD;AAoBD,GA3CW;;AA6CZC,EAAAA,aAAa,CAACL,IAAD,EAAOM,SAAP,EAAkB;AAC7B,QAAI,CAACN,IAAD,IAAS,CAACM,SAAS,CAACC,MAAxB,EAAgC;AAC9B;AACD;AACF;;AAjDW,CAAd,C,CAoDA;;AAEA,eAAexC,OAAf","sourcesContent":["let clientId = '3d9d154962884d8fb22eb244782faf67';\nlet clientSecret = 'fa730531798d4521890bfedf100d81d7';\nlet redirectURI = 'http://localhost:3000/';\n\nlet accessToken;\n\nlet Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n\n    const accessTokenMatches = window.location.href.match(/access_token=([^&]*)/);\n    const tokenExpiresMatch = window.location.href.match(/expires_in=([^&]*)/);\n    if (accessTokenMatches && tokenExpiresMatch) {\n      accessToken = accessTokenMatches[1];\n      const tokenExpires = Number(tokenExpiresMatch[1]);\n      window.setTimeout(() => accessToken = '', tokenExpires * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n    } else {\n      const userRedirect = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\n      window.location = userRedirect;\n    }\n  },\n\n  search(term) {\n    const accessToken = Spotify.getAccessToken();\n\n    fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n    headers: {'Authorization': 'Bearer ' + accessToken}\n    }).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n      throw new Error('Request failed!');\n    }, networkError => console.log(networkError.message)\n    ).then(jsonResponse => {\n        if (!jsonResponse.tracks) {\n          return [];\n        }\n        return jsonResponse.tracks.items.map(track => ({\n            id: track.id,\n            name: track.name,\n            artist: track.artists[0].name,\n            album: track.album.name,\n            uri: track.uri\n        }));\n    })\n  },\n\n  savePlaylists(name, trackURIs) {\n    if (!name || !trackURIs.length) {\n      return\n    }\n  }\n\n};\n// not sure about items in map method\n\nexport default Spotify;\n"]},"metadata":{},"sourceType":"module"}